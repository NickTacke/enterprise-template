services:
  postgres:
    image: postgres:14-alpine
    restart: always
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - enterprise-template-net

  redis:
    image: redis:7-alpine
    restart: always
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    networks:
      - enterprise-template-net

  minio:
    image: minio/minio:latest
    restart: always
    ports:
      - '9000:9000' # API
      - '9001:9001' # Console
    volumes:
      - minio_data:/data
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
    networks:
      - enterprise-template-net

  kong-db:
    image: postgres:13
    container_name: kong-db
    environment:
      POSTGRES_USER: ${KONG_DB_USER:-kong}
      POSTGRES_PASSWORD: ${KONG_DB_PASSWORD:-kongpass}
      POSTGRES_DB: ${KONG_DB_NAME:-kong}
    volumes:
      - kong_db_data:/var/lib/postgresql/data
    networks:
      - enterprise-template-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5

  kong-migrations:
    image: kong:3.4
    container_name: kong-migrations
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-db
      KONG_PG_USER: ${KONG_DB_USER:-kong}
      KONG_PG_PASSWORD: ${KONG_DB_PASSWORD:-kongpass}
    command: "kong migrations bootstrap"
    depends_on:
      kong-db:
        condition: service_healthy
    networks:
      - enterprise-template-net
    restart: on-failure

  kong-gateway:
    image: kong:3.4
    container_name: kong-gateway
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-db
      KONG_PG_USER: ${KONG_DB_USER:-kong}
      KONG_PG_PASSWORD: ${KONG_DB_PASSWORD:-kongpass}
      KONG_LOG_LEVEL: debug
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
    ports:
      - "8000:8000"
      - "8443:8443"
      - "8001:8001"
      - "8444:8444"
    depends_on:
      kong-migrations:
        condition: service_completed_successfully
    networks:
      - enterprise-template-net
    healthcheck:
      test: ["CMD-SHELL", "kong health"]
      interval: 10s
      timeout: 5s
      retries: 5

  keycloak:
    image: quay.io/keycloak/keycloak:24.0
    container_name: keycloak
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN_USER:-admin}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD:-admin}
    command: "start-dev"
    ports:
      - "8080:8080"
    networks:
      - enterprise-template-net
    depends_on:
      - postgres

  konga:
    image: pantsel/konga
    container_name: konga
    ports:
      - "1337:1337"
    environment:
      NODE_ENV: development
    networks:
      - enterprise-template-net
    volumes:
      - konga_data:/app/kongadata
    depends_on:
      - kong-gateway

networks:
  enterprise-template-net:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  minio_data:
  kong_db_data:
  konga_data: 